{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9656225,"sourceType":"datasetVersion","datasetId":5898822}],"dockerImageVersionId":30786,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:02:33.481416Z","iopub.execute_input":"2024-10-23T12:02:33.481858Z","iopub.status.idle":"2024-10-23T12:02:33.492886Z","shell.execute_reply.started":"2024-10-23T12:02:33.481819Z","shell.execute_reply":"2024-10-23T12:02:33.491559Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/titanictest/Titanic.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:02:36.001812Z","iopub.execute_input":"2024-10-23T12:02:36.002825Z","iopub.status.idle":"2024-10-23T12:02:36.014075Z","shell.execute_reply.started":"2024-10-23T12:02:36.002773Z","shell.execute_reply":"2024-10-23T12:02:36.012596Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:02:38.167155Z","iopub.execute_input":"2024-10-23T12:02:38.168522Z","iopub.status.idle":"2024-10-23T12:02:38.190432Z","shell.execute_reply.started":"2024-10-23T12:02:38.168464Z","shell.execute_reply":"2024-10-23T12:02:38.188825Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Значение колонок:\n1. PassengerId - уникальный идентификатор пассажира\n2. Survived - целевой признак (0 - не выжил 1 - выжил)\n3. Pclass - класс билета (1, 2 или 3)\n4. Name - имя и титул пассажира\n5. Sex - пол пассажира (male или female)\n6. Age - возсраст пассажира\n7. SibSp - количество родственников и жены/мужы на борту\n8. Parch - количество родителей и детей на борту\n9. Ticket - номер билета\n10. Fare - стоимость билета\n11. Cabin - номерю каюты (если доступна)\n12. Embarked - порт отправления (C, Q, S)","metadata":{}},{"cell_type":"markdown","source":"Выдвинутые гипотезы:\n* выживание зависит от номера каюты\n* выживание зависит от класса билета\n* выживание зависит от возсраста\n* выживание зависит от пола\n* выживание зависит от id\n* выживание зависит от SibSp\n* выживание зависит от Parch","metadata":{}},{"cell_type":"code","source":"df['Survived'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:02:42.58822Z","iopub.execute_input":"2024-10-23T12:02:42.588994Z","iopub.status.idle":"2024-10-23T12:02:42.607654Z","shell.execute_reply.started":"2024-10-23T12:02:42.588927Z","shell.execute_reply":"2024-10-23T12:02:42.605352Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:02:44.707655Z","iopub.execute_input":"2024-10-23T12:02:44.708237Z","iopub.status.idle":"2024-10-23T12:02:44.717181Z","shell.execute_reply.started":"2024-10-23T12:02:44.708184Z","shell.execute_reply":"2024-10-23T12:02:44.715727Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:02:46.963458Z","iopub.execute_input":"2024-10-23T12:02:46.964162Z","iopub.status.idle":"2024-10-23T12:02:46.976734Z","shell.execute_reply.started":"2024-10-23T12:02:46.964107Z","shell.execute_reply":"2024-10-23T12:02:46.974775Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Минимальные критерии для запуска модели машинного обучения\n1) отсутствие пропусков\n2) убрать не числовые типы","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:02:51.478681Z","iopub.execute_input":"2024-10-23T12:02:51.479151Z","iopub.status.idle":"2024-10-23T12:02:51.495098Z","shell.execute_reply.started":"2024-10-23T12:02:51.479114Z","shell.execute_reply":"2024-10-23T12:02:51.493496Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"кодируем данные \nколонки у которых тип данных object","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:02:22.685124Z","iopub.execute_input":"2024-10-23T12:02:22.685559Z","iopub.status.idle":"2024-10-23T12:02:22.697898Z","shell.execute_reply.started":"2024-10-23T12:02:22.685516Z","shell.execute_reply":"2024-10-23T12:02:22.695703Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"categorical_cols = df.select_dtypes(include=['object']).columns\nlabel_encoders = {}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:03:18.042065Z","iopub.execute_input":"2024-10-23T12:03:18.042577Z","iopub.status.idle":"2024-10-23T12:03:18.0508Z","shell.execute_reply.started":"2024-10-23T12:03:18.042533Z","shell.execute_reply":"2024-10-23T12:03:18.048736Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"categorical_cols","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:03:20.031703Z","iopub.execute_input":"2024-10-23T12:03:20.032298Z","iopub.status.idle":"2024-10-23T12:03:20.040912Z","shell.execute_reply.started":"2024-10-23T12:03:20.032235Z","shell.execute_reply":"2024-10-23T12:03:20.039377Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\nfor col in categorical_cols:\n    le = LabelEncoder()\n    df[col] = le.fit_transform(df[col])\n    label_encoders[col] = le","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:03:22.357196Z","iopub.execute_input":"2024-10-23T12:03:22.357707Z","iopub.status.idle":"2024-10-23T12:03:22.37421Z","shell.execute_reply.started":"2024-10-23T12:03:22.357664Z","shell.execute_reply":"2024-10-23T12:03:22.372543Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:03:24.786237Z","iopub.execute_input":"2024-10-23T12:03:24.787736Z","iopub.status.idle":"2024-10-23T12:03:24.809147Z","shell.execute_reply.started":"2024-10-23T12:03:24.787673Z","shell.execute_reply":"2024-10-23T12:03:24.807756Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Видим что все колонны стали числами","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:03:27.336523Z","iopub.execute_input":"2024-10-23T12:03:27.336981Z","iopub.status.idle":"2024-10-23T12:03:27.350876Z","shell.execute_reply.started":"2024-10-23T12:03:27.336941Z","shell.execute_reply":"2024-10-23T12:03:27.349458Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"теперь уберем пропуски в данных","metadata":{}},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:03:29.776668Z","iopub.execute_input":"2024-10-23T12:03:29.777191Z","iopub.status.idle":"2024-10-23T12:03:29.788785Z","shell.execute_reply.started":"2024-10-23T12:03:29.777145Z","shell.execute_reply":"2024-10-23T12:03:29.787493Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"У нас пропуски только в колонке возраст\nЗаполним в ней нули медианным значением по этой же колонке","metadata":{}},{"cell_type":"code","source":"df['Age'].fillna(df['Age'].median(), inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:03:32.332142Z","iopub.execute_input":"2024-10-23T12:03:32.332761Z","iopub.status.idle":"2024-10-23T12:03:32.342463Z","shell.execute_reply.started":"2024-10-23T12:03:32.332702Z","shell.execute_reply":"2024-10-23T12:03:32.34103Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:03:34.591286Z","iopub.execute_input":"2024-10-23T12:03:34.591715Z","iopub.status.idle":"2024-10-23T12:03:34.603492Z","shell.execute_reply.started":"2024-10-23T12:03:34.591679Z","shell.execute_reply":"2024-10-23T12:03:34.601885Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Сначала надо закодировать все в числа, затем заполнять пропуски","metadata":{}},{"cell_type":"code","source":"X = df.drop(columns=['Survived'])\ny = df['Survived']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:03:36.693909Z","iopub.execute_input":"2024-10-23T12:03:36.694422Z","iopub.status.idle":"2024-10-23T12:03:36.701793Z","shell.execute_reply.started":"2024-10-23T12:03:36.694379Z","shell.execute_reply":"2024-10-23T12:03:36.700318Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:03:39.356767Z","iopub.execute_input":"2024-10-23T12:03:39.357241Z","iopub.status.idle":"2024-10-23T12:03:39.377071Z","shell.execute_reply.started":"2024-10-23T12:03:39.357198Z","shell.execute_reply":"2024-10-23T12:03:39.375684Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['Survived'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:03:41.536808Z","iopub.execute_input":"2024-10-23T12:03:41.53732Z","iopub.status.idle":"2024-10-23T12:03:41.547601Z","shell.execute_reply.started":"2024-10-23T12:03:41.537252Z","shell.execute_reply":"2024-10-23T12:03:41.545864Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Создаем модель","metadata":{}},{"cell_type":"markdown","source":"* изменил test_size на 0.1","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.datasets import make_classification\nfrom sklearn.preprocessing import StandardScaler\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state=42)\n\n# Standardize the data\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Create the merual network model\nmodel = Sequential()\nmodel.add(Dense(32, activation='relu', input_shape=(X_train.shape[1],)))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)\n\n# Evaluate the model\nloss, accuracy = model.evaluate(X_test, y_test)\nprint(f'Test Accuracy: {accuracy:.2f}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:18:16.016826Z","iopub.execute_input":"2024-10-23T12:18:16.017289Z","iopub.status.idle":"2024-10-23T12:18:18.388237Z","shell.execute_reply.started":"2024-10-23T12:18:16.017227Z","shell.execute_reply":"2024-10-23T12:18:18.386881Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:14:27.817357Z","iopub.execute_input":"2024-10-23T12:14:27.817916Z","iopub.status.idle":"2024-10-23T12:14:27.832298Z","shell.execute_reply.started":"2024-10-23T12:14:27.817868Z","shell.execute_reply":"2024-10-23T12:14:27.830823Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"график","metadata":{}},{"cell_type":"code","source":"history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model_loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='upper left')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-23T12:18:25.632027Z","iopub.execute_input":"2024-10-23T12:18:25.63255Z","iopub.status.idle":"2024-10-23T12:18:26.843338Z","shell.execute_reply.started":"2024-10-23T12:18:25.632505Z","shell.execute_reply":"2024-10-23T12:18:26.842173Z"}},"outputs":[],"execution_count":null}]}